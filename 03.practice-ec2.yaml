- name: create ec2 and r53
  hosts: local
  connection: local
  vars:
    ami_id: ami-09c813fb71547fc4f
    sg_id: sg-0696dc92e81135eee # replace with your SG ID
    zone_id: "Z09288351F1RG63CMSZ8A" # replace with your ID
    domain_name: "msdevsecops.fun"
    # we can pass instances through command line using -e
    instances: 
    # - mongodb
    - frontend
    # - redis
    # - mysql
    # - rabbitmq
  tasks:
  - name: create ec2 instance
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      instance_type: t3.micro
      security_group:  "{{ sg_id }}"
      image_id: "{{ ami_id }}"
      tags:
        Name: "{{ item }}"
    loop: "{{ instances }}"
    register: ec2_output 

  - name: print the ec2 output
    ansible.builtin.debug:
      msg: "{{ ec2_output }}"

# private_ip_address
  - name: print the private ip
    ansible.builtin.debug:
      msg: "{{ item.instances[0].private_ip_address }}"
    loop: "{{ ec2_output.results }}"

  - name: print the public ip
    ansible.builtin.debug:
      msg: "{{ item.instances[0].public_ip_address }}"
    loop: "{{ ec2_output.results }}"

  - name: create route53 record
    amazon.aws.route53:
     state: present
     zone: "{{ domain_name }}"
     record: "{{ item.item }}.{{ domain_name }}"
     type: A
     ttl: 1
     value: "{{ item.instances[0].private_ip_address }}"
     overwrite: true
    loop: "{{ ec2_output.results }}"

  - name: create route53 record
    amazon.aws.route53:
     state: present
     zone: "{{ domain_name }}"
     record: "{{ domain_name }}"
     type: A
     ttl: 1
     value: "{{ item.instances[0].public_ip_address }}"
     overwrite: true
    when: item.item == "frontend"
    loop: "{{ ec2_output.results }}"

    
